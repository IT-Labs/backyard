buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.29")
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.ben-manes.versions" version "0.39.0"
	id 'java'
	id "org.sonarqube" version "3.2.0"
	id "jacoco"
}
apply plugin: 'io.spring.javaformat'
group = 'com.it-labs'
sourceCompatibility = '17'
targetCompatibility ='17'
version ='version 1'
configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}
springBoot {
	buildInfo()
}
bootJar {
	archiveFileName="service.jar"
}
repositories {
	mavenCentral()
	jcenter()
}
ext {
	set('springCloudVersion', "2020.0.4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation  'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.8.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation("org.springframework.cloud:spring-cloud-starter-bus-amqp")
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}
jacocoTestReport {
    reports {
        xml.enabled true
		}
}