#docker-compose.yml (Base)
#https://github.com/wrouesnel/postgres_exporter
version: "3.7"
networks:
  sample:
    name: sample-network
    driver: bridge
volumes:
  api-postgres:
    external: true
  redisinsight-sample:
  redis-sample:
services:
  rabbitmq-sample:
    image: "bitnami/rabbitmq:latest"
    container_name: rabbitmq-sample
    environment:
      - RABBITMQ_USERNAME=dev
      - RABBITMQ_PASSWORD=dev123
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - sample
  api-postgres:
    image: library/postgres:14
    container_name: api-postgres
    environment:
      - POSTGRES_PASSWORD=dev123
      - POSTGRES_USER=dev
      - POSTGRES_DB=sample
    volumes:
      - api-postgres:/var/lib/postgresql/data:z
    ports:
      - "5444:5432"
    networks:
      - sample
  keycloak-sample:
    image: jboss/keycloak:12.0.1
    container_name: keycloak-sample
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=postgres
      - DB_SCHEMA=keycloak
      - DB_DATABASE=sample
      - DB_ADDR=api-postgres
      - DB_USER=dev
      - DB_PASSWORD=dev123
      - JDBC_PARAMS=useSSL=false
      - "JAVA_OPTS=-Djboss.socket.binding.port-offset=-1900"
    ports:
      - "6180:6180"
    depends_on:
      - api-postgres
    networks:
      - sample
    # healthcheck:
    #   test: "curl -f http://localhost:8080/auth || exit 1"
    #   start_period: 20s
  redis-sample:
    image: redis:6.2.6-alpine
    container_name: redis-sample
    networks:
      - sample
    volumes:
      - redis-sample:/data:z
    ports:
      - "6378:6379"
  redis-insight:
    container_name: redis-insight-sample
    image: redislabs/redisinsight:1.11.0
    ports:
      - "8002:8001"
    volumes:
      - redisinsight-sample:/db
    networks:
      - sample
    depends_on:
      - redis-sample
  zookeeper-debezium:
    image: debezium/zookeeper:1.6
    container_name: zookeeper-debezium
    hostname: zookeeper-debezium
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - sample
  kafka-debezium:
    image: debezium/kafka:1.6
    container_name: kafka-debezium
    hostname: kafka-debezium
    ports:
      - "4092:9092"
    links:
      - zookeeper-debezium
    environment:
      - ZOOKEEPER_CONNECT=zookeeper-debezium:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - sample
  kafka-ui-debezium:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui-debezium
    ports:
      - "4093:8080"
    links:
      - zookeeper-debezium
      - kafka-debezium
    networks:
      - sample
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-debezium:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper-debezium:2181
  connect-debezium:
    image: debezium/connect:1.6
    container_name: connect-debezium
    ports:
      - "4094:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka-debezium:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_TOPIC_CREATION_ENABLE=true
    depends_on:
      - zookeeper-debezium
      - kafka-debezium
    networks:
      - sample
  debezium-ui:
    image: debezium/debezium-ui:1.6
    container_name: debezium-ui
    ports:
      - "4095:8080"
    environment:
      - KAFKA_CONNECT_URI=http://connect-debezium:8083
    depends_on:
      - connect-debezium
    networks:
      - sample
